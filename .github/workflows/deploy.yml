name: deploy-to-ec2

on:
  push:
    branches: [ main ]
    paths:
      - "vote/**"
      - "result/**"
      - "worker/**"
      - "docker-compose.yaml"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

env:
  REG_USER: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build & push each service image
      
      - name: Build & push result
        uses: docker/build-push-action@v6
        with:
          context: ./result
          file: ./result/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/result:latest
          platforms: linux/amd64
          provenance: false
          no-cache: true

      - name: Build & push worker
        uses: docker/build-push-action@v6
        with:
          context: ./worker
          file: ./worker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/worker:latest
          platforms: linux/amd64
          provenance: false
          no-cache: true


      - name: Build & push vote
        uses: docker/build-push-action@v6
        with:
          context: ./vote
          file: ./vote/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/vote:latest
          platforms: linux/amd64
          provenance: false
          no-cache: true

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1) Load your EC2 private key
      - name: set up ssh
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # 2) Copy docker-compose to the server
      - name: copy docker-compose file
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo mkdir -p /opt/app && sudo chown $USER:$USER /opt/app'
          scp -o StrictHostKeyChecking=no docker-compose.yaml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/app/docker-compose.yaml

      # 3) SSH and run docker compose
      - name: run docker-compose up
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<'EOSSH'
            set -e
            COMPOSE=/opt/app/docker-compose.yaml

            # install compose plugin if missing
            if ! docker compose version >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y docker-compose-plugin
            fi

            docker login -u '${{ secrets.DOCKERHUB_USERNAME }}' -p '${{ secrets.DOCKERHUB_TOKEN }}'
            docker compose -f "$COMPOSE" pull
            docker compose -f "$COMPOSE" up -d
            docker compose -f "$COMPOSE" ps
            docker system prune -f
          EOSSH

