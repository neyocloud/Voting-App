name: deploy-to-ec2

on:
  push:
    branches: [ main ]
    paths:
      - "vote/**"
      - "result/**"
      - "worker/**"
      - "docker-compose.yaml"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push result
        uses: docker/build-push-action@v6
        with:
          context: ./result
          file: ./result/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/result:latest
          platforms: linux/amd64
          provenance: false
          no-cache: true

      - name: Build & push worker
        uses: docker/build-push-action@v6
        with:
          context: ./worker
          file: ./worker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/worker:latest
          platforms: linux/amd64
          provenance: false
          no-cache: true

      - name: Build & push vote
        uses: docker/build-push-action@v6
        with:
          context: ./vote
          file: ./vote/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/vote:latest
          platforms: linux/amd64
          provenance: false
          no-cache: true

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for docker-compose.yaml)
        uses: actions/checkout@v4

      # Load your EC2 private key into the SSH agent
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # Copy docker-compose.yaml from repo root to /opt/app on EC2
      - name: Copy docker-compose.yaml to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo mkdir -p /opt/app && sudo chown $USER:$USER /opt/app'
          scp -o StrictHostKeyChecking=no docker-compose.yaml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/app/docker-compose.yaml

      # Install Docker (if missing), login to Docker Hub, and deploy using sudo
      - name: Deploy on EC2 (sudo docker)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<'EOSSH'
            set -euo pipefail

            # Ensure Docker Engine + Compose plugin (Ubuntu 24.04)
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu noble stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo systemctl enable --now docker
            fi

            # Verify we can talk to Docker daemon *with sudo*
            sudo -n docker version >/dev/null

            cd /opt/app

            # Safer login with password-stdin
            echo '${{ secrets.DOCKERHUB_TOKEN }}' | sudo docker login -u '${{ secrets.DOCKERHUB_USERNAME }}' --password-stdin

            # Pull and start
            sudo docker compose -f docker-compose.yaml pull
            sudo docker compose -f docker-compose.yaml up -d
            sudo docker compose -f docker-compose.yaml ps
          EOSSH
