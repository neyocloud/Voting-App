name: deploy-to-ec2

on:
  push:
    branches: [ main ]
    paths:
      - "vote/**"
      - "result/**"
      - "worker/**"
      - "docker-compose.yaml"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push result
        uses: docker/build-push-action@v6
        with:
          context: ./result
          file: ./result/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/result:latest
          platforms: linux/amd64
          provenance: false
          no-cache: true

      - name: Build & push worker
        uses: docker/build-push-action@v6
        with:
          context: ./worker
          file: ./worker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/worker:latest
          platforms: linux/amd64
          provenance: false
          no-cache: true

      - name: Build & push vote
        uses: docker/build-push-action@v6
        with:
          context: ./vote
          file: ./vote/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/vote:latest
          platforms: linux/amd64
          provenance: false
          no-cache: true

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Load EC2 SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Copy docker-compose.yaml to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo mkdir -p /opt/app && sudo chown $USER:$USER /opt/app'
          scp -o StrictHostKeyChecking=no docker-compose.yaml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/app/docker-compose.yaml

      - name: Deploy on EC2 (run as root to avoid docker.sock perms)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "sudo bash -lc '
            set -euo pipefail

            # Ensure Docker Engine + Compose (Ubuntu 24.04 - noble)
            if ! command -v docker >/dev/null 2>&1; then
              apt-get update -y
              apt-get install -y ca-certificates curl gnupg
              install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              chmod a+r /etc/apt/keyrings/docker.gpg
              echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu noble stable\" > /etc/apt/sources.list.d/docker.list
              apt-get update -y
              apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              systemctl enable --now docker
            fi



            cd /opt/app

            # Login and deploy (ALL as root)
            echo \"${{ secrets.DOCKERHUB_TOKEN }}\" | docker login -u \"${{ secrets.DOCKERHUB_USERNAME }}\" --password-stdin
            docker compose -f docker-compose.yaml pull
            docker compose -f docker-compose.yaml up -d
            docker compose -f docker-compose.yaml ps
          '"
